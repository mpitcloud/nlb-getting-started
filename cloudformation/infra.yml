AWSTemplateFormatVersion: '2010-09-09'
Description: AWS NLB PoC Demo
Parameters:
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 key pair to enable SSH access to the EC2
      instances.
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: Select a default VPC ID.
  SubnetID:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Select a default subnet ID in your selected VPC.
  # DesiredCapacity:
  #   Type: Number
  #   Default: '1'
  # MaxSize:
  #   Type: Number
  #   Default: '1'
  #   Description: Maximum number of instances that can be launched in your ECS cluster.
  SpotInstanceType:
    Description: EC2 instance type
    Type: String
    Default: m4.large
    AllowedValues:
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - m3.medium
      - m3.large
      - m3.xlarge
      - m3.2xlarge
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10xlarge
      - c4.large
      - c4.xlarge
      - c4.2xlarge
      - c4.4xlarge
      - c4.8xlarge
      - c3.large
      - c3.xlarge
      - c3.2xlarge
      - c3.4xlarge
      - c3.8xlarge
      - r3.large
      - r3.xlarge
      - r3.2xlarge
      - r3.4xlarge
      - r3.8xlarge
      # - i2.xlarge
      # - i2.2xlarge
      # - i2.4xlarge
      # - i2.8xlarge
      # - i3.xlarge
      # - i3.2xlarge
      # - i3.4xlarge
      # - i3.8xlarge
      # - i3.16xlarge
    ConstraintDescription: Please choose a valid instance type.
  SpotPrice:
    Type: String
    Default: 0.03
    Description: default spot price for SpotInstanceType selected above
# Mappings:
#   AWSRegionToAMI:
#     us-west-2:
#       AMIID: ami-aa5ebdd2
Resources:
  Ec2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: EC2 Security Group
      VpcId: !Ref 'VpcId'

  ingress1:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref Ec2SecurityGroup
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      CidrIp: 0.0.0.0/0

  ingress2:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref Ec2SecurityGroup
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      CidrIp: 0.0.0.0/0


  EC2AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: !Ref 'SubnetID'
      LaunchConfigurationName: !Ref Ec2Instance
      MinSize: 0
      MaxSize: 1
      # MaxSize: !Ref 'MaxSize'
      # DesiredCapacity: !Ref 'DesiredCapacity'
      DesiredCapacity: 1
      HealthCheckGracePeriod: 300
      TargetGroupARNs:
        - !Ref publicNLBTargetGroup
      Tags:
        - 
          Key: Name
          Value: !Sub
            - "${StackName}-docker"
            - StackName: !Ref AWS::StackName
          PropagateAtLaunch: true
        # - 
        #   Key: ECS_CLUSTER
        #   Value: !Sub ${AWS::StackName}-ecs-cluster
        #   PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: '0'
        MaxBatchSize: '1'
        PauseTime: PT15M
        WaitOnResourceSignals: 'true'


  Ec2Instance:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      # ImageId: !FindInMap [AWSRegionToAMI, !Ref 'AWS::Region', AMIID]
      ImageId: !GetAtt AMIInfo.Id
      SecurityGroups:
        - !Ref 'Ec2SecurityGroup'
      SpotPrice: !Ref SpotPrice
      InstanceType: !Ref SpotInstanceType
      # IamInstanceProfile: !Ref EC2InstanceProfile
      KeyName: !Ref 'KeyName'
      # BlockDeviceMappings:
      #   - DeviceName: /dev/sda1
      #     Ebs:
      #       VolumeSize: '100'
      #       VolumeType: gp2
      AssociatePublicIpAddress: 'true'
      UserData: 
        "Fn::Base64": 
          !Sub |
            #!/bin/bash
            yum update -y
            yum install -y aws-cfn-bootstrap nginx
            service nginx start
            # # /opt/aws/bin/cfn-init -v -s ${AWS::StackId} -r ASGLC --region ${AWS::Region}
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource EC2AutoScalingGroup --region ${AWS::Region} 

  # EC2RoleForECR:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     AssumeRolePolicyDocument:
  #       Statement:
  #         - Effect: Allow
  #           Principal:
  #             Service:
  #               - ec2.amazonaws.com
  #           Action:
  #             - sts:AssumeRole
  #     Path: /
  #     Policies:
  #       - PolicyName: ecr-service
  #         PolicyDocument:
  #           Statement:
  #             - Effect: Allow
  #               Action:
  #                 - ecr:*
  #               Resource: '*'

  # EC2InstanceProfile:
  #   Type: AWS::IAM::InstanceProfile
  #   Properties:
  #     Path: /
  #     Roles:
  #       - !Ref EC2RoleForECR


#######################
#   NLB
#######################  

  publicNLB:
    # Condition: UseALBCond
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      Type: network
      Name: !Sub
        - ${StackName}-nlb
        -
          StackName: !Ref AWS::StackName
      Scheme: internet-facing
      Subnets: !Ref SubnetID
        # - !Ref PublicZoneA
        # - !Ref PublicZoneB
      Tags:
        -
          Key: Name
          Value: !Sub
            - ${StackName}-alb
            - StackName: !Ref AWS::StackName

  NLBListener:
    Type : AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        -
          Type: forward
          TargetGroupArn: !Ref publicNLBTargetGroup
      LoadBalancerArn: !Ref publicNLB
      Port: 80
      Protocol: TCP

  publicNLBTargetGroup:
    # Condition: UseALBCond
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      # HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      Matcher:
        HttpCode: 200-399
      Name: !Sub
        - ${StackName}-http-tg
        - StackName: !Ref AWS::StackName
      Port: 80
      Protocol: TCP
      Tags:
        - 
          Key: Name
          Value: alb-tg        
      VpcId: !Ref VpcId

###################
# AMI INFO Function
###################
  AMIInfoFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: >
          
          //A sample Lambda function that looks up the latest AMI ID for a given region and architecture.

          // Map instance architectures to an AMI name pattern

          var archToAMINamePattern = {
              "PV64": "amzn-ami-pv*x86_64-ebs",
              "HVM64": "amzn-ami-hvm*x86_64-gp2",
              "HVMG2": "amzn-ami-graphics-hvm*x86_64-ebs*",
              "ECS": "amzn-ami-*amazon-ecs-optimized"
          };

          var aws = require("aws-sdk");
          
          exports.handler = function(event, context) {
          
              console.log("REQUEST RECEIVED:\n" + JSON.stringify(event));
              
              // For Delete requests, immediately send a SUCCESS response.
              if (event.RequestType == "Delete") {
                  sendResponse(event, context, "SUCCESS");
                  return;
              }
          
              var responseStatus = "FAILED";
              var responseData = {};
          
              var ec2 = new aws.EC2({region: event.ResourceProperties.Region});
              var describeImagesParams = {
                  Filters: [{ Name: "name", Values: [archToAMINamePattern[event.ResourceProperties.Architecture]]}],
                  Owners: [event.ResourceProperties.Architecture == "HVMG2" ? "679593333241" : "amazon"]
              };
          
              // Get AMI IDs with the specified name pattern and owner

              ec2.describeImages(describeImagesParams, function(err, describeImagesResult) {
                  if (err) {
                      responseData = {Error: "DescribeImages call failed"};
                      console.log(responseData.Error + ":\n", err);
                  }
                  else {
                      var images = describeImagesResult.Images;
                      // Sort images by name in decscending order. The names contain the AMI version, formatted as YYYY.MM.Ver.
                      images.sort(function(x, y) { return y.Name.localeCompare(x.Name); });
                      for (var j = 0; j < images.length; j++) {
                          if (isBeta(images[j].Name)) continue;
                          responseStatus = "SUCCESS";
                          responseData["Id"] = images[j].ImageId;
                          break;
                      }
                  }
                  sendResponse(event, context, responseStatus, responseData);
              });
          };

          // Check if the image is a beta or rc image. The Lambda function won't return any of those images.

          function isBeta(imageName) {
              return imageName.toLowerCase().indexOf("beta") > -1 || imageName.toLowerCase().indexOf(".rc") > -1;
          }


          // Send response to the pre-signed S3 URL 

          function sendResponse(event, context, responseStatus, responseData) {
          
              var responseBody = JSON.stringify({
                  Status: responseStatus,
                  Reason: "See the details in CloudWatch Log Stream: " + context.logStreamName,
                  PhysicalResourceId: context.logStreamName,
                  StackId: event.StackId,
                  RequestId: event.RequestId,
                  LogicalResourceId: event.LogicalResourceId,
                  Data: responseData
              });
          
              console.log("RESPONSE BODY:\n", responseBody);
          
              var https = require("https");
              var url = require("url");
          
              var parsedUrl = url.parse(event.ResponseURL);
              var options = {
                  hostname: parsedUrl.hostname,
                  port: 443,
                  path: parsedUrl.path,
                  method: "PUT",
                  headers: {
                      "content-type": "",
                      "content-length": responseBody.length
                  }
              };
          
              console.log("SENDING RESPONSE...\n");
          
              var request = https.request(options, function(response) {
                  console.log("STATUS: " + response.statusCode);
                  console.log("HEADERS: " + JSON.stringify(response.headers));
                  // Tell AWS Lambda that the function execution is done  
                  context.done();
              });
          
              request.on("error", function(error) {
                  console.log("sendResponse Error:" + error);
                  // Tell AWS Lambda that the function execution is done  
                  context.done();
              });
            
              // write data to request body
              request.write(responseBody);
              request.end();
          }      

      Handler: "index.handler"
      Runtime: nodejs6.10
      Description: "Query the latest ECS AMI for Cloudformation template"
      Timeout: 300
      Role: !GetAtt LambdaExecutionRole.Arn
      Tags:
        - Key: custom:cloudformation:purpose
          Value: AMIInfo



  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
          - Effect: Allow
            Action:
            - ec2:DescribeImages
            Resource: "*"
          - Effect: Allow
            Action:
            - ecs:*
            Resource: "*"


  AMIInfo:
    Type: Custom::AMIInfo
    Properties:
      ServiceToken: !GetAtt AMIInfoFunction.Arn
      Region: !Ref "AWS::Region"
      Architecture: HVM64
      # Architecture: ECS


Outputs:
  # ecsservice:
  #   Value: !Ref 'service'
  # ecscluster:
  #   Value: !Ref 'ECSCluster'
  URL:
    Description: Your NLB DNS URL
    Value: !Sub
        - "http://${DNSName}"
        - DNSName: !GetAtt publicNLB.DNSName  
    
  AmiId:
    Value:
      !GetAtt AMIInfo.Id
    Description: AMI ID  
